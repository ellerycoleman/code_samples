#----------------------------------------------------------------------------
# File:		Overview.txt
# Date:		Fri Jan  6 02:05:32 GMT 2012
# Author(s):	Ellery Coleman <ellerycoleman@fas.harvard.edu>
# Abstract:	Overview of HW7 (final project) Solution.
#----------------------------------------------------------------------------
# Revision: $Id$
#----------------------------------------------------------------------------


My solution for HW7 is spread across 20 files.  In the paragraphs below I will
discuss the design decisions that were implemented in this code and provide
details that are unique to my solution.  But to begin I'd like to provide a
listing of all the files that make up my solution along with a short summary
of what each file provides:

1. AccountImpl.java:
   Implements the Account interface, provides remote bank accounts.

2. AccountInfo.java:
   A serializable component that holds user account/pin info.

3. Account.java:
   An interface description for bank accounts.

4. ATMException.java:
   An exception to signal ATM-related problems.

5. ATMFactoryImpl.java:
   Implements the ATMFactory interface; provides references to ATMs.

6. ATMFactory.java:
   An interface description for an ATM factory.

7. ATMImpl.java:
   Implements the ATM interface, provides an ATM.

8. ATM.java:
   An interface description for ATMs.

9. ATMListener.java:
   An interface description to support the distribution of ATM
   TransactionNotifications.

10. ATMServer.java:
    Registers the ATMFactoryImpl with the naming service.

11. BankImpl.java:
    Implements the Bank interface; initializes 3 bank accounts.

12. Bank.java:
    An interface description for the Bank.

13. BankServer.java:
    Registers BankImpl and SecurityImpl with the naming service.

14. Client.java:
    A client application to run Prof. Sawyer's test suite.

15. NSFException.java:
    An exception to signal Insufficent Funds for a Bank Account.

16. SecurityException.java:
    An exception to signal authentication or authorization issues.

17. SecurityImpl.java:
    Implements the Security interface; initializes 3 security profiles.

18. Security.java:
    An interface for the bank's Security system.

19. securityProfile.java:
    A class to store user authentication and authorization data.

20. TransactionNotification.java:
    A serializable component to pass ATM transaction messages.






#-------------------------------------------
#  Design decisions and unique features
#-------------------------------------------

My solution for HW7 follows the HW7 spec very closely.  Rather than repeating
the HW7 spec I will highlight the unique design decisions and features found
within my solution.



#--------------------------
# Security Implementation
#--------------------------
In order to store pin numbers and permissions for each bank account I created the
securityProfile class.  This class provides the appropriate data structures and
getter/setter methods for pin numbers and permissions.  The security profiles are
stored in a Map that uses account numbers as keys.  The bank's Security service
performs authentication and authorization using the methods provided by this
securityProfile class.




#----------------------------
# ATMListener Implementation
#----------------------------
Java SE provides the Observer pattern in order facilitate publisher/subscriber
behavior between java objects.  To use the Observer pattern the publishing object
must extend the Observable class and the subscribing objects must implement the
Observer interface.  The publishing object adds observers (or listeners) to itself
using the addObserver() method of the Observable class.  Whenever the publishing
object wishes to notify its observers of an event, it calls the following 2 methods
from the Observable class:


   // Assert that something has changed,
   // otherwise no notifications will be sent out.
   //---------------------------------------------
   setChanged();

   // Notify all observers of the change by calling
   // their update(Object obj) method.  Each observer
   // is given a copy of obj.
   //--------------------------------------------------
   notifyObservers(Object obj);
                       


Objects that wish to subscribe to these messages implement the Observer interface.
The Observer interface has an update() method that the Publisher will call each
time the observers need to be notified.

I chose to use Java's standard Observer design pattern in order to implement the
ATMListener interface for this project.  The ATM extends the Observable class
and the addObserver() method is provided within the ATM interface so that clients
can register themselves as ATMListeners.  The ATMListener interface requires that
an update() method be provided.  Whenevever the ATM wants to publish a message to
the ATMListeners it runs the following code:

   TransactionNotification tn= new TransactionNotification("Message from ATM...");
   setChanged();
   notifyObservers(tn);  // sends TransactionNotification to all ATMListeners



Java's standard Observer pattern only works within a single JVM.  In order to extend
this design pattern to work with RMI, I followed the straightforward instructions
found here:

http://sites.google.com/site/jamespandavan/Home/java/sample-remote-observer-based-on-rmi




#---------------------------------------
# A note about local/remote references
#---------------------------------------
Objects that are required to be passed by value implement the
java.io.Serializable interface.  

Objects that are required to be passed by reference have interfaces that
extend java.rmi.Remote, but they do not implement Serializable.





#----------------------------
# Final Notes
#----------------------------

The remainder of my project runs strictly according to the spec.
The build.xml file for HW7 is similar to the build.xml files that I've
submitted as part of previous homework assignments.  It builds a jar file
containing the final project implementation.  You can use the following
commands to run the code:


$ rmiregistry -J-cp -Jproject.jar
$ java -cp project.jar cscie160.project.BankServer
$ java -cp project.jar cscie160.project.ATMServer
$ java -cp project.jar cscie160.project.Client



The jar file contains the overview for this assignment, along with the javadocs,
sample output, and the ant build file.  The source code is also included in the
jar file.


Please let me know if you have any questions or concerns.


Thanks, and Happy New Year!
 -el




