#----------------------------------------------------------------------------
# File:		Overview.txt
# Date:		Fri Jan  6 02:05:32 GMT 2012
# Author(s):	Ellery Coleman <ellerycoleman@fas.harvard.edu>
# Abstract:	Overview of HW7 (final project) Solution.
#----------------------------------------------------------------------------
# Revision: $Id$
#----------------------------------------------------------------------------


My solution for HW7 is spread across 20 files.  In the paragraphs below I will
share details of how the components defined within these files work together to
provide the distributed banking service.  But immediately I'd like to provide a
listing of the files along with a short summary of what each file provides:

1. AccountImpl.java:
   Implements the Account interface, provides remote bank accounts.

2. AccountInfo.java:
   A serializable component that holds user account/pin info.

3. Account.java:
   An interface description for bank accounts.

4. ATMException.java:
   An exception to signal ATM-related problems.

5. ATMFactoryImpl.java:
   Implements the ATMFactory interface; provides references to ATMs.

6. ATMFactory.java:
   An interface description for an ATM factory.

7. ATMImpl.java:
   Implements the ATM interface, provides an ATM.

8. ATM.java:
   An interface description for ATMs.

9. ATMListener.java:
   An interface description; supports ATM TransactionNotifications.

10. ATMServer.java:
    Registers the ATMFactoryImpl with the naming service.

11. BankImpl.java:
    Implements the Bank interface; initializes 3 bank accounts.

12. Bank.java:
    An interface description for the Bank.

13. BankServer.java:
    Registers BankImpl and SecurityImpl with the naming service.

14. Client.java:
    A client application to run Prof. Sawyer's test suite.

15. NSFException.java:
    An exception to signal Insufficent Funds for a Bank Account.

16. SecurityException.java:
    An exception to signal authentication or authorization issues.

17. SecurityImpl.java:
    Implements the Security interface; initializes 3 security profiles.

18. Security.java:
    An interface for the Security system.

19. securityProfile.java:
    A class to store user authentication and authorization data.

20. TransactionNotification.java:
    A serializable component to transfer ATM transaction messages.




My solution for HW7 follows the HW7 spec very closely.  Rather than repeating
the HW7 spec, I will highlight the unique design decisions found within my
solution.



#----------------------------
# ATMListener Implementation
#----------------------------
Java provides the Observer pattern in order facilitate publisher/subscriber behavior
between objects.  The publishing object


The Account class now has 3 data members:
1. balance
2. accountNumber
3. numberGenerator

The "numberGenerator" is a static integer that is used to provide a unique bank
account number whenever a new Account is created.  The Account class now provides
methods to support deposits, withdrawals, and balance inquiries based on the
supplied account number.

The ATMImpl class provides a static collection of bank accounts.  These accounts
are stored in a hashmap which uses the bank account number as the key.  The
constructor for this class initializes 3 accounts as required by the spec.

ATMFactoryImpl provides a static collection of atm machines.  You can request a
reference to an ATM by calling getATM() with the atm number as a parameter.
If you don't specify an ATM number then getATM() will return a reference to the
first ATM.  For this assignment I've only created a single atm, but the support
for multiple atms is present.

The build.xml file for HW5 is similar to the build.xml files that I've
submitted as part of previous homework assignments.  It builds a jar file
containg the hw5 implementation.  You can use the following commands to run
the code:


$ rmiregistry -J-cp -Jproject.jar
$ java -cp project.jar cscie160.project.BankServer
$ java -cp project.jar cscie160.project.ATMServer
$ java -cp project.jar cscie160.project.Client


The jar file contains the overview for this assignment, along with the javadocs,
sample output, and the ant build file.  There is no source in the jar file; it is
provided in a separate zip file.

