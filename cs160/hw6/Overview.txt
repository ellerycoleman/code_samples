#----------------------------------------------------------------------------
# File:		Overview.txt	
# Date:		Sun Dec  4 03:12:04 GMT 2011
# Author(s):	Ellery Coleman <ellerycoleman@fas.harvard.edu>
# Abstract:	Overview of HW6 Solution.
#----------------------------------------------------------------------------
# Revision: $Id$
#----------------------------------------------------------------------------


My solution for HW6 is spread across 10 files:

 1. cscie160/hw6/Account.java
 2. cscie160/hw6/ATMException.java
 3. cscie160/hw6/ATMImplementation.java
 4. cscie160/hw6/ATM.java
 5. cscie160/hw6/ATMProxy.java
 6. cscie160/hw6/ATMRunnable.java
 7. cscie160/hw6/ATMThread.java
 8. cscie160/hw6/Client.java
 9. cscie160/hw6/Commands.java
10. cscie160/hw6/Server.java


Per the HW6 spec, many of these files were copied directly from HW4 and
have only had one line modifed - the 'package' line so that they belong
to 'cscie160.hw6'.


I added the classes ATMRunnable and ATMThread for this assignment.
ATMRunnable represents a client work order, and it provides everything
that a thread would need in order to process the work order.  Specifically,
it provides access to the client's command, an ATM, the client PrintStream,
and a run() method to process the work order.  The ATMRunnable.run() method
is actually the Server.executeCommand() from HW4. It has been slightly
modified to work properly in its new location.

The ATMThread class is used to generate the threads that process client
requests.  It has 2 data members: an ID and a reference to the Server's
workOrder queue.  Threads created with this class cooperate to process
all client requests on a first-come-first-served basis.

The Account class has been updated to provide synchronized methods for
deposit(), withdraw(), and getBalance().  This ensures the consistency
of the account by preventing multiple threads from operating on the
account balance at the same time.

The Server class has been updated to create a pool of ATMThreads on
startup, and to place all client requests into the workOrder
queue.  The workOrder queue is actually an ArrayList<ATMRunnable>.
Client requests are placed at the end of the ArrayList using
ArrayList.add().  When the threads process a request, they pull it
from the front of the array using ArrayList.get(0).

The source code, javadocs, and ANT build file for this assignment are
all included as part of the hw6.jar file.  You can use the following
commands to run the code for this assignment.


To run the server:
$ java -cp hw6.jar cscie160.hw6.Server
(you must enter CTRL+C to stop the server)


To run the client:
$ java -cp hw6.jar cscie160.hw6.Client localhost 1099



